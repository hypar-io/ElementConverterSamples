//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Spatial;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements.Piping
{
    #pragma warning disable // Disable all warnings

    /// <summary>An element representing a pipe between two PipeConnections.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PipeSegment : GeometricElement
    {
        [Newtonsoft.Json.JsonConstructor]
        public PipeSegment(double @diameter, double @wallThickness, PipeConnector @end, PipeConnector @start, Polyline @path, PressureCalculationBase @pressureCalculations, NetworkComponentLocator @componentLocator, Transform @transform, Material @material, Representation @representation, bool @isElementDefinition, System.Guid @id, string @name)
            : base(transform, material, representation, isElementDefinition, id, name)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<PipeSegment>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @diameter, @wallThickness, @end, @start, @path, @pressureCalculations, @componentLocator, @transform, @material, @representation, @isElementDefinition, @id, @name});
            }
        
            this.Diameter = @diameter;
            this.WallThickness = @wallThickness;
            this.End = @end;
            this.Start = @start;
            this.Path = @path;
            this.PressureCalculations = @pressureCalculations;
            this.ComponentLocator = @componentLocator;
            
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The design diameter of the pipe(not the flow diameter).</summary>
        [Newtonsoft.Json.JsonProperty("Diameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Diameter { get; set; }
    
        /// <summary>The thickness of the wall of the pipe.  The available diameter for flow is the Diameter minus 2X the Wall Thickness</summary>
        [Newtonsoft.Json.JsonProperty("Wall Thickness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WallThickness { get; set; }
    
        /// <summary>The end of the pipe. Fluid travels from start -&gt; end in a pipe.</summary>
        [Newtonsoft.Json.JsonProperty("End", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PipeConnector End { get; set; }
    
        /// <summary>The start of the pipe. Fluid travels from start -&gt; end in a pipe.</summary>
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PipeConnector Start { get; set; }
    
        /// <summary>The path of the pipe segment.  This polyline will normally have exactly two points except when a new path is being suggested as an override.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polyline Path { get; set; }
    
        /// <summary>The pressure calculation data for this pipe segment.</summary>
        [Newtonsoft.Json.JsonProperty("Pressure Calculations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PressureCalculationBase PressureCalculations { get; set; }
    
        /// <summary>The data needed to locate this network component.</summary>
        [Newtonsoft.Json.JsonProperty("ComponentLocator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkComponentLocator ComponentLocator { get; set; }
    
    
    }
}